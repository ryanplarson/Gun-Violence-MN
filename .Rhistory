#number of unique MPLS ZCTAs
n_zcta <- length(unique(panel$zcta))
#vector of intersecting ZCTAs for filtering downstream
zcta_universe <- unique(panel$zcta)
#Minneapolis Police Department - Use of Force Dashboard
uof_spatial <- read_csv("Police_Use_Of_Force.csv")  %>%
mutate(date=ymd_hms(ResponseDate),
year=isoyear(date),
week=isoweek(date)) %>%
select(OBJECTID, year, week, X, Y, Race) %>%
st_as_sf(coords = c("X", "Y"), crs = "NAD83", remove=F) %>%
mutate(intersection = as.integer(st_intersects(geometry, zcta)),
zcta = ifelse(is.na(intersection), NA, zcta$zcta[intersection])) %>%
st_drop_geometry() %>%
filter(!is.na(zcta) & year >= 2016 & year <= 2020 & zcta %in% zcta_universe) %>%
group_by(year, week, zcta, Race, .drop=F) %>%
tally(name = "use_of_force") %>%
filter(!is.na(Race) & Race!="not recorded") %>%
ungroup() %>%
complete(year, week, zcta=zcta_universe, Race, fill = list(use_of_force = 0)) %>%
arrange(year, week, zcta, Race) %>%
mutate(race = str_to_lower(Race)) %>%
select(-Race) %>%
pivot_wider(names_from = race,
values_from = use_of_force,
values_fill = 0,
names_glue = "{race}_{.value}") %>%
mutate(total_use_of_force = asian_use_of_force+black_use_of_force+`native american_use_of_force`+
`other / mixed race_use_of_force`+`pacific islander_use_of_force`+unknown_use_of_force+
white_use_of_force)
#MPD Stop Dashboard
stop_spatial <- read_csv("Police_Stop_Data.csv") %>%
mutate(date=ymd_hms(responseDate),
year=isoyear(date),
week=isoweek(date)) %>%
select(OBJECTID, year, week, lat, long, race) %>%
st_as_sf(coords = c("long", "lat"), crs = "NAD83", remove=F) %>%
mutate(intersection = as.integer(st_intersects(geometry, zcta)),
zcta = ifelse(is.na(intersection), NA, zcta$zcta[intersection])) %>%
st_drop_geometry() %>%
filter(!is.na(zcta) & year >= 2016& year <= 2020 & zcta %in% zcta_universe) %>%
group_by(year, week, zcta, race, .drop=F) %>%
tally(name = "police_stops") %>%
filter(!is.na(race) & race!="not recorded") %>%
ungroup() %>%
complete(year, week, zcta=zcta_universe, race, fill = list(police_stops = 0)) %>%
mutate(race = str_to_lower(race)) %>%
arrange(year, week, zcta, race) %>%
pivot_wider(names_from = race,
values_from = police_stops,
values_fill = 0,
names_glue = "{race}_{.value}") %>%
mutate(total_police_stops = asian_police_stops+black_police_stops+
`east african_police_stops`+latino_police_stops+`native american_police_stops`+
other_police_stops+unknown_police_stops+white_police_stops)
#Officer Involved Shootings - MPD
ois_spatial <- read_csv("Police_Officer_Involved_Shootings.csv") %>%
mutate(date=ymd_hms(IncidentDate),
year=isoyear(date),
week=isoweek(date)) %>%
select(OBJECTID, year, week, CenterLatitude, CenterLongitude, SubjectOfForceRace) %>%
rename(race = SubjectOfForceRace,
lat = CenterLatitude,
long = CenterLongitude) %>%
st_as_sf(coords = c("long", "lat"), crs = "NAD83", remove=F) %>%
mutate(intersection = as.integer(st_intersects(geometry, zcta)),
zcta = ifelse(is.na(intersection), NA, zcta$zcta[intersection])) %>%
st_drop_geometry() %>%
filter(!is.na(zcta) & year >= 2016 & year <= 2020 & zcta %in% zcta_universe) %>%
group_by(year, week, zcta, race, .drop=F) %>%
tally(name = "police_shootings") %>%
filter(!is.na(race) & race!="not recorded") %>%
ungroup() %>%
complete(year=2016:2021, week=1:53, zcta=zcta_universe, race, fill = list(police_shootings = 0)) %>%
mutate(race = str_to_lower(race)) %>%
arrange(year, week, zcta, race) %>%
pivot_wider(names_from = race,
values_from = police_shootings,
values_fill = 0,
names_glue = "{race}_{.value}") %>%
mutate(total_police_shootings = asian_police_shootings+black_police_shootings+
hispanic_police_shootings+other_police_shootings+
unknown_police_shootings+white_police_shootings)
panel <- panel %>%
left_join(uof_spatial, by = c("year", "weekofyr"="week", "zcta"="zcta")) %>%
left_join(stop_spatial, by = c("year", "weekofyr"="week", "zcta"="zcta")) %>%
left_join(ois_spatial, by = c("year", "weekofyr"="week", "zcta"="zcta"))
#creating period indicators for panel
panel <- panel %>%
mutate(post_floyd = ifelse(begin_date >= as.Date("2020-05-25"), T, F),
post_floyd_3 = ifelse(begin_date >= (as.Date("2020-05-25")+months(3)), T, F),
stay_at_home = ifelse( begin_date >= as.Date("2020-03-28"), T, F),
state_of_emerg = ifelse( begin_date >= as.Date("2020-03-13"), T, F),
period = factor(case_when(
post_floyd==F & post_floyd_3==F ~ "Pre Floyd",
post_floyd==T & post_floyd_3==F ~ "Post Floyd",
post_floyd==T & post_floyd_3==T ~ "Post Floyd 3 Months"),
levels = c("Pre Floyd", "Post Floyd", "Post Floyd 3 Months"))) %>%
group_by(zcta) %>%
arrange(year, weekofyr) %>%
mutate(t = row_number(),
uof_lag = dplyr::lag(total_use_of_force, 1),
stops_lag = dplyr::lag(total_police_stops, 1),
shoot_lag = dplyr::lag(total_police_shootings, 1))
#aggregate to zip-level over years
zip_level <- panel %>%
group_by(zcta, period) %>%
summarize(assault_tot = sum(assault_tot, na.rm = T),
unintent_tot = sum(unintent_tot, na.rm = T),
suicide_tot = sum(suicide_tot, na.rm = T),
undeter_tot = sum(undeter_tot, na.rm = T),
legal_tot = sum(legal_tot, na.rm = T),
combined_tot = sum(combined_tot, na.rm = T),
total_pop = sum(total_pop, na.rm = T)) %>%
mutate(assault_incid_c = (assault_tot/total_pop)*1000,
unintent_incid_c = (unintent_tot/total_pop)*1000,
suicide_incid_c = (suicide_tot/total_pop)*1000,
undeter_incid_c = (undeter_tot/total_pop)*1000,
legal_incid_c = (legal_tot/total_pop)*1000,
combined_incid_c = (combined_tot/total_pop)*1000) %>%
ungroup() %>%
st_drop_geometry() %>%
left_join(zcta, by = "zcta")
#george floyd square
gfs <- geocode("George Floyd Square, Minneapolis", output = "latlon") %>%
st_as_sf(coords = c("lon", "lat"), crs = "NAD83", remove=F) %>%
mutate(name = "GFS")
ggplot() +
geom_sf(data = zip_level, aes(geometry = geometry, fill = assault_incid_c)) +
geom_sf(data = mpls, aes(geometry = geometry), color = "black", alpha = 0)+
geom_sf(data = gfs, aes(geometry = geometry), color = "black")+
geom_text_repel(data = gfs, aes(x=lon, y=lat, label = name),
fontface = "bold",
nudge_x = 1, nudge_y = -1)+
facet_wrap(~period)+
scale_fill_distiller(palette = "Spectral")+
labs(title = "Firearm Assault Discharge Rates by ZCTA and Period",
subtitle = "MHA Hispital Discharge Data",
fill = "Incident Rate/1,000")+
theme(axis.text = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.title = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_line(colour="transparent"),
plot.subtitle = element_text(face="italic"),
strip.background = element_rect(fill = "white",
colour = "black"))
fe_model <- lm(assault_incid_c~t+state_of_emerg+stay_at_home+post_floyd+post_floyd_3+
as.factor(zcta), data = panel)
summary(fe_model)
fe_police_model <-  lm(assault_incid_c~t+state_of_emerg+stay_at_home+post_floyd+post_floyd_3+
uof_lag+stops_lag+shoot_lag+
as.factor(zcta), data = panel)
summary(fe_police_model)
fe_int_model <- lm(assault_incid_c~t+state_of_emerg+stay_at_home+post_floyd+post_floyd_3+as.factor(zcta)+
post_floyd:as.factor(zcta)+post_floyd_3:as.factor(zcta), data = panel)
summary(fe_int_model)
#map of post_floyd coefficients by zip? color just significant from 0?
#random effects models
library(lme4)
library(lmerTest)
re_model <- lmer(assault_incid_c~t+state_of_emerg+stay_at_home+post_floyd+post_floyd_3+
uof_lag+stops_lag+shoot_lag+
total_pop+black_pop+na_pop+white_pop+hisp_pop+asian_pop+mar_fam+povlevel+med_age+
ssi_snap+bach_degree+male+nowork_12+post_floyd:black_pop+
post_floyd:nowork_12+
(1|zcta), data = panel)
summary(re_model)
#panel to week-level, aggregating over ZCTAs
hosp_series <- panel %>%
group_by(year, weekofyr) %>%
summarize(assault_tot = sum(assault_tot, na.rm = T),
unintent_tot = sum(unintent_tot, na.rm = T),
suicide_tot = sum(suicide_tot, na.rm = T),
undeter_tot = sum(undeter_tot, na.rm = T),
legal_tot = sum(legal_tot, na.rm = T),
combined_tot = sum(combined_tot, na.rm = T),
total_pop = sum(total_pop, na.rm = T)) %>%
mutate(assault_incid_c = (assault_tot/total_pop)*1000,
unintent_incid_c = (unintent_tot/total_pop)*1000,
suicide_incid_c = (suicide_tot/total_pop)*1000,
undeter_incid_c = (undeter_tot/total_pop)*1000,
legal_incid_c = (legal_tot/total_pop)*1000,
combined_incid_c = (combined_tot/total_pop)*1000) %>%
ungroup() %>%
mutate(week_id = row_number()) %>%
st_drop_geometry()
#Minneapolis Police Department - Use of Force Dashboard
uof <- read_csv("Police_Use_Of_Force.csv") %>%
mutate(date=ymd_hms(ResponseDate),
year=isoyear(date),
week=isoweek(date)) %>%
group_by(year, week, .drop=F) %>%
tally(name = "use_of_force") %>%
arrange(year, week) %>%
ungroup() %>%
select(year, week, everything())
#merge onto series
series <- hosp_series %>%
left_join(uof, by=c("year", "weekofyr"="week")) %>%
mutate(use_of_force_rate = (use_of_force/total_pop)*1000)
#MPD Officer Involved Shootings
ois <- read_csv("Police_Officer_Involved_Shootings.csv") %>%
mutate(date=ymd_hms(IncidentDate),
year=isoyear(date),
week=isoweek(date)) %>%
group_by(year, week, .drop=F) %>%
tally(name = "off_inv_shooting") %>%
arrange(year, week) %>%
ungroup() %>%
select(year, week, everything())
#merge onto series
series <- series %>%
left_join(ois, by=c("year", "weekofyr"="week")) %>%
mutate(off_inv_shooting = ifelse(is.na(off_inv_shooting), 0, off_inv_shooting),
off_inv_shooting_rate = (off_inv_shooting/total_pop)*1000)
#Minneapolis Police Department - Police Stops Dashboard
stop <- read_csv("Police_Stop_Data.csv") %>%
mutate(date=ymd_hms(responseDate),
year=isoyear(date),
week=isoweek(date)) %>%
group_by(year, week, .drop=F) %>%
tally(name = "police_stops")
#merge onto series
series <- series %>%
left_join(stop, by = c("year", "weekofyr"="week")) %>%
mutate(police_stops = ifelse(is.na(police_stops), 0, police_stops),
police_stop_rate = (police_stops/total_pop)*1000)
#New York Times COVID Case/Mortality Data
covid_hennepin <- nytcovcounty %>%
mutate(week = isoweek(date),
year = isoyear(date)) %>%
filter(county=="Hennepin" & state=="Minnesota" & year >=2019) %>%
group_by(year, week, .drop=F) %>%
summarize(covid_cases = sum(cases, na.rm = T),
covid_deaths = sum(deaths, na.rm = T))
#filling 0s for pre-covid series
series <- series %>%
left_join(covid_hennepin, by = c("year", "weekofyr"="week")) %>%
mutate_at(vars(c(covid_cases, covid_deaths)), ~ifelse(is.na(.), 0, .))
#creating date variable
series <- series %>%
mutate(begin_date = ISOweek2date(paste(year, paste0("W", sprintf("%02d", weekofyr)), 1,sep = "-")),
end_date = begin_date+weeks(1)-days(1))
weather <- read_csv("noaa_scrape.csv")
View(weather)
#weatherData
#the scraper sometimes doesn't run, so I have saved successful scrapes locally for backup
noaa_token <- "nrEVQsKalyfOauURFnZPpNZQwbAiPaSh"
#list of ncdc stations with coverage over MPLS ZCTAs
stations <- ncdc_stations(extent = as.vector(st_bbox(zcta[zcta$zcta %in% zcta_universe,]))[order(c(2,1,4,3))],
token = noaa_token, startdate = "2016-01-01", enddate = "2020-12-31")
#list of ncdc stations with coverage over MPLS ZCTAs
stations <- ncdc_stations(extent = as.vector(st_bbox(zcta[zcta$zcta %in% zcta_universe,]))[order(c(2,1,4,3))],
token = noaa_token, startdate = "2016-01-01", enddate = "2020-12-31")
ncdc_datasets(stationid=stations$data$id, token=noaa_token)
#list of ncdc stations with coverage over MPLS ZCTAs
stations <- ncdc_stations(extent = as.vector(st_bbox(zcta[zcta$zcta %in% zcta_universe,]))[order(c(2,1,4,3))],
token = noaa_token, startdate = "2016-01-01", enddate = "2020-12-31")
ncdc_datasets(stationid=stations$data$id, token=noaa_token)
datatypes <- c('PRCP','SNOW', 'TMAX')
begin_date <- as.list(series$begin_date)
weather <- map2_df(.x = begin_date,
.y = end_date,
~ ncdc(datasetid='GHCND',
datatypeid=datatypes,
stationid=ncdc_stations(extent = as.vector(st_bbox(zcta[zcta$zcta %in% zcta_universe,]))[order(c(2,1,4,3))],
token = noaa_token, startdate = .x, enddate = .y)$data$id,
startdate = .x,
enddate = .y,
limit=1000,
token = noaa_token)$data %>%
group_by(date, datatype) %>%
summarize(value = mean(value, na.rm = T)) %>%
pivot_wider(id_cols = date, names_from = datatype, values_from = value))
end_date <- as.list(series$end_date)
weather <- map2_df(.x = begin_date,
.y = end_date,
~ ncdc(datasetid='GHCND',
datatypeid=datatypes,
stationid=ncdc_stations(extent = as.vector(st_bbox(zcta[zcta$zcta %in% zcta_universe,]))[order(c(2,1,4,3))],
token = noaa_token, startdate = .x, enddate = .y)$data$id,
startdate = .x,
enddate = .y,
limit=1000,
token = noaa_token)$data %>%
group_by(date, datatype) %>%
summarize(value = mean(value, na.rm = T)) %>%
pivot_wider(id_cols = date, names_from = datatype, values_from = value))
View(weather)
datatypes <- c('PRCP','SNWF', 'TMAX')
begin_date <- as.list(series$begin_date)
end_date <- as.list(series$end_date)
weather <- map2_df(.x = begin_date,
.y = end_date,
~ ncdc(datasetid='GHCND',
datatypeid=datatypes,
stationid=ncdc_stations(extent = as.vector(st_bbox(zcta[zcta$zcta %in% zcta_universe,]))[order(c(2,1,4,3))],
token = noaa_token, startdate = .x, enddate = .y)$data$id,
startdate = .x,
enddate = .y,
limit=1000,
token = noaa_token)$data %>%
group_by(date, datatype) %>%
summarize(value = mean(value, na.rm = T)) %>%
pivot_wider(id_cols = date, names_from = datatype, values_from = value))
View(weather)
weather <- map2_df(.x = begin_date,
.y = end_date,
~ ncdc(datasetid='GHCND',
datatypeid=datatypes,
stationid=ncdc_stations(extent = as.vector(st_bbox(zcta[zcta$zcta %in% zcta_universe,]))[order(c(2,1,4,3))],
token = noaa_token, startdate = .x, enddate = .y)$data$id,
startdate = .x,
enddate = .y,
limit=1000,
token = noaa_token)$data %>%
group_by(date, datatype) %>%
summarize(value = mean(value, na.rm = T)) %>%
pivot_wider(id_cols = date, names_from = datatype, values_from = value))
View(weather)
weather <- read_csv("dnr_weather.csv")
View(weather)
str(weather)
table(weather$`Maximum Temperature degrees (F)`)
table(weather$`Snow (inches)`)
table(weather$`Precipitation (inches)`)
table(weather$Date
)
max(weather$Date)
weather <- read_csv("dnr_weather.csv") %>%
mutate(year=isoyear(Date),
week=isoweek(Date),
precip.in = as.numeric(ifelse(`Precipitation (inches)`=="T", .001, `Precipitation (inches)`)),
snow.in = as.numeric(ifelse(`Snow (inches)`=="T", .001, `Snow (inches)`)),
tmax.f = `Maximum Temperature degrees (F)`)
View(weather)
weather <- read_csv("dnr_weather.csv") %>%
mutate(year=isoyear(Date),
week=isoweek(Date),
precip.in = as.numeric(ifelse(`Precipitation (inches)`=="T", .001, `Precipitation (inches)`)),
snow.in = as.numeric(ifelse(`Snow (inches)`=="T", .001, `Snow (inches)`)),
tmax.f = `Maximum Temperature degrees (F)`) %>%
select(year, week, precip.in, snow.in, tmax.f)
View(weather)
weather <- read_csv("dnr_weather.csv") %>%
mutate(year=isoyear(Date),
week=isoweek(Date),
precip.in = as.numeric(ifelse(`Precipitation (inches)`=="T", .001, `Precipitation (inches)`)),
snow.in = as.numeric(ifelse(`Snow (inches)`=="T", .001, `Snow (inches)`)),
tmax.f = `Maximum Temperature degrees (F)`) %>%
filter(year >= 2016 & year <= 2020) %>%
select(year, week, precip.in, snow.in, tmax.f)
View(weather)
weather <- read_csv("dnr_weather.csv") %>%
mutate(year=isoyear(Date),
week=isoweek(Date),
precip.in = as.numeric(ifelse(`Precipitation (inches)`=="T", .001, `Precipitation (inches)`)),
snow.in = as.numeric(ifelse(`Snow (inches)`=="T", .001, `Snow (inches)`)),
tmax.f = `Maximum Temperature degrees (F)`) %>%
filter(year >= 2016 & year <= 2020) %>%
select(year, week, precip.in, snow.in, tmax.f) %>%
group_by(year, week) %>%
summarize(precip.in = sum(precip.in, na.rm = T),
snow.in = sum(snow.in, na.rm = T),
tmax.f = max(tmax.f, na.rm = T))
View(weather)
weather <- read_csv("dnr_weather.csv") %>%
mutate(year=isoyear(Date),
week=isoweek(Date),
precip.in = as.numeric(ifelse(`Precipitation (inches)`=="T", .001, `Precipitation (inches)`)),
snow.in = as.numeric(ifelse(`Snow (inches)`=="T", .001, `Snow (inches)`)),
tmax.f = `Maximum Temperature degrees (F)`) %>%
filter(year >= 2016 & year <= 2020) %>%
select(year, week, precip.in, snow.in, tmax.f) %>%
group_by(year, week) %>%
summarize(precip.in = mean(precip.in, na.rm = T),
snow.in = mean(snow.in, na.rm = T),
tmax.f = mean(tmax.f, na.rm = T))
View(weather)
#join to series
series <- series %>% left_join(weather, by = c("year","weekofyr"="week"))
View(series)
weather <- read_csv("noaa_scrape.csv")
weather_series <- weather %>%
mutate(precip.in = (PRCP/10)*.0393701, #mm ti in
snow.in = ifelse(is.na(SNWD), 0, SNWD/10)*.0393701, #mm to in
tmax.f = TMAX/10,
week = isoweek(date),
year = year(date)) %>%
select(year, week, precip.in, snow.in, tmax.f)
View(weather_series)
tange(weather_series$tmax.f)
range(weather_series$tmax.f)
stations$data$id
length(stations$data$id)
weather <- map2_df(.x = begin_date,
.y = end_date,
~ ncdc(datasetid='GHCND',
datatypeid=datatypes,
stationid=ncdc_stations(extent = as.vector(st_bbox(zcta[zcta$zcta %in% zcta_universe,]))[order(c(2,1,4,3))],
token = noaa_token, startdate = .x, enddate = .y)$data$id,
startdate = .x,
enddate = .y,
limit=1000,
token = noaa_token))
View(weather)
weather <- map2_df(.x = begin_date,
.y = end_date,
~ ncdc(datasetid='GHCND',
datatypeid=datatypes,
stationid=ncdc_stations(extent = as.vector(st_bbox(zcta[zcta$zcta %in% zcta_universe,]))[order(c(2,1,4,3))],
token = noaa_token, startdate = .x, enddate = .y)$data$id,
startdate = .x,
enddate = .y,
limit=1000,
token = noaa_token))$data
View(weather)
rm(weather)
weather <- map2_df(.x = begin_date,
.y = end_date,
~ ncdc(datasetid='GHCND',
datatypeid=datatypes,
stationid=ncdc_stations(extent = as.vector(st_bbox(zcta[zcta$zcta %in% zcta_universe,]))[order(c(2,1,4,3))],
token = noaa_token, startdate = .x, enddate = .y)$data$id,
startdate = .x,
enddate = .y,
limit=1000,
token = noaa_token))
?ncdc
weather <- map2_df(.x = begin_date,
.y = end_date,
~ ncdc(datasetid='GHCND',
datatypeid=datatypes,
locationid = "Minneapolis, Mn",
token = noaa_token, startdate = .x, enddate = .y)$data$id,
startdate = .x,
enddate = .y,
limit=1000,
token = noaa_token))
weather <- map2_df(.x = begin_date,
.y = end_date,
~ ncdc(datasetid='GHCND',
datatypeid=datatypes,
locationid = "Minneapolis, MN",
startdate = .x,
enddate = .y,
limit=1000,
token = noaa_token))
View(stations)
stations$data
weather <- map2_df(.x = begin_date,
.y = end_date,
~ ncdc(datasetid='GHCND',
datatypeid=datatypes,
stationid = "GHCND:US1MNHN0025",
startdate = .x,
enddate = .y,
limit=1000,
token = noaa_token))
weather <- map2_df(.x = begin_date,
.y = end_date,
~ ncdc(datasetid='GHCND',
datatypeid=datatypes,
locationid = "'FIPS:02'",
startdate = .x,
enddate = .y,
limit=1000,
token = noaa_token))
weather <- map2_df(.x = begin_date,
.y = end_date,
~ ncdc(datasetid='GHCND',
datatypeid=datatypes,
locationid = "FIPS:02",
startdate = .x,
enddate = .y,
limit=1000,
token = noaa_token))
stations$data$id
weather <- map2_df(.x = begin_date,
.y = end_date,
~ ncdc(datasetid='GHCND',
datatypeid=datatypes,
stationid = stations$data$id,
startdate = .x,
enddate = .y,
limit=1000,
token = noaa_token))
weather <- map2_df(.x = begin_date,
.y = end_date,
~ ncdc(datasetid='GHCND',
datatypeid=datatypes,
stationid = stations$data$id,
startdate = .x,
enddate = .y,
limit=1000,
token = noaa_token))
begin_date <- as.list(series$begin_date)
end_date <- as.list(series$end_date)
weather <- map2_df(.x = begin_date,
.y = end_date,
~ ncdc(datasetid='GHCND',
datatypeid=datatypes,
stationid = stations$data$id,
startdate = .x,
enddate = .y,
limit=1000,
token = noaa_token))
class(stations$data$id)
